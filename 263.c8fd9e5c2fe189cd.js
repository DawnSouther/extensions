(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[263],{81263:(r,o,a)=>{"use strict";a.r(o),a.d(o,{PopoverApiComponent:()=>O,PopoverModule:()=>w,PopoverOverviewComponent:()=>y});var n=a(19132),v=a(58695),s=a(94650),u=a(36895),m=a(24006),b=a(41206),C=a(3238),T=a(4859),q=a(56709),k=a(44144),_=a(59549),P=a(71948),Z=a(84385),f=a(87314),d=a(31474),h=a(71865);function c(p,l){if(1&p&&(s.TgZ(0,"mat-option",14),s._uU(1),s.qZA()),2&p){const t=l.$implicit;s.Q6J("value",t),s.xp6(1),s.Oqu(t)}}function j(p,l){if(1&p&&(s.TgZ(0,"mat-option",14),s._uU(1),s.qZA()),2&p){const t=l.$implicit;s.Q6J("value",t),s.xp6(1),s.Oqu(t)}}function x(p,l){if(1&p){const t=s.EpF();s.TgZ(0,"section")(1,"mat-form-field")(2,"mat-label"),s._uU(3,"EnterDelay"),s.qZA(),s.TgZ(4,"input",3),s.NdJ("ngModelChange",function(g){s.CHM(t);const i=s.oxw();return s.KtG(i.enterDelay=g)}),s.qZA()(),s.TgZ(5,"mat-form-field")(6,"mat-label"),s._uU(7,"LeaveDelay"),s.qZA(),s.TgZ(8,"input",3),s.NdJ("ngModelChange",function(g){s.CHM(t);const i=s.oxw();return s.KtG(i.leaveDelay=g)}),s.qZA()()()}if(2&p){const t=s.oxw();s.xp6(4),s.Q6J("ngModel",t.enterDelay),s.xp6(4),s.Q6J("ngModel",t.leaveDelay)}}function I(p,l){if(1&p){const t=s.EpF();s.TgZ(0,"section")(1,"mat-checkbox",1),s.NdJ("ngModelChange",function(g){s.CHM(t);const i=s.oxw();return s.KtG(i.hasBackdrop=g)}),s._uU(2,"HasBackdrop"),s.qZA()()}if(2&p){const t=s.oxw();s.xp6(1),s.Q6J("ngModel",t.hasBackdrop)}}function S(p,l){if(1&p&&(s.TgZ(0,"button",15,16),s._uU(2," Show Popover With Hover\n"),s.qZA()),2&p){s.oxw();const t=s.MAs(50);s.Q6J("mtxPopoverTriggerFor",t)}}function U(p,l){if(1&p&&(s.TgZ(0,"button",17,18),s._uU(2," Show Popover With Click\n"),s.qZA()),2&p){s.oxw();const t=s.MAs(50);s.Q6J("mtxPopoverTriggerFor",t)}}const F=function(p,l){return[p,l]};class E{constructor(){this.triggerEvent="hover",this.enterDelay=100,this.leaveDelay=100,this.xOffset=0,this.yOffset=0,this.closeOnPanelClick=!1,this.hasBackdrop=!0,this.elevation=8,this.positionXOptions=["before","after"],this.positionYOptions=["above","below"],this.positionStartOptions=[...this.positionYOptions,...this.positionXOptions],this.positionEndOptions=[],this.positionStart="below",this.positionEnd="after"}onPositionStartChange(l){this.positionXOptions.includes(this.positionStart)&&(this.positionEnd="below",this.positionEndOptions=[...this.positionYOptions,"center"]),this.positionYOptions.includes(this.positionStart)&&(this.positionEnd="after",this.positionEndOptions=[...this.positionXOptions,"center"])}ngOnInit(){this.onPositionStartChange()}static#s=this.\u0275fac=function(t){return new(t||E)};static#n=this.\u0275cmp=s.Xpm({type:E,selectors:[["popover-example"]],decls:53,vars:25,consts:[[1,"popover-position"],[3,"ngModel","ngModelChange"],[3,"value",4,"ngFor","ngForOf"],["matInput","","type","number",3,"ngModel","ngModelChange"],["value","hover"],["value","click"],[4,"ngIf"],["min","0","max","24","discrete",""],["matSliderThumb","",3,"ngModel","ngModelChange"],["cdkDrag","","mat-raised-button","","color","primary","mtxPopoverTriggerOn","hover",3,"mtxPopoverTriggerFor",4,"ngIf"],["cdkDrag","","mat-raised-button","","color","primary","mtxPopoverTriggerOn","click",3,"mtxPopoverTriggerFor",4,"ngIf"],[3,"enterDelay","leaveDelay","position","xOffset","yOffset","closeOnPanelClick","closeOnBackdropClick","hasBackdrop","elevation"],["popover","mtxPopover"],[2,"max-width","300px"],[3,"value"],["cdkDrag","","mat-raised-button","","color","primary","mtxPopoverTriggerOn","hover",3,"mtxPopoverTriggerFor"],["popoverTrigger","mtxPopoverTrigger"],["cdkDrag","","mat-raised-button","","color","primary","mtxPopoverTriggerOn","click",3,"mtxPopoverTriggerFor"],["popoverTrigger2","mtxPopoverTrigger"]],template:function(t,e){1&t&&(s.TgZ(0,"h2"),s._uU(1,"Popover configuration"),s.qZA(),s.TgZ(2,"section",0)(3,"label"),s._uU(4,"Position:"),s.qZA(),s._uU(5," [ "),s.TgZ(6,"mat-form-field")(7,"mat-label"),s._uU(8,"Start"),s.qZA(),s.TgZ(9,"mat-select",1),s.NdJ("ngModelChange",function(i){return e.positionStart=i})("ngModelChange",function(){return e.onPositionStartChange()}),s.YNc(10,c,2,2,"mat-option",2),s.qZA()(),s._uU(11," , "),s.TgZ(12,"mat-form-field")(13,"mat-label"),s._uU(14,"End"),s.qZA(),s.TgZ(15,"mat-select",1),s.NdJ("ngModelChange",function(i){return e.positionEnd=i}),s.YNc(16,j,2,2,"mat-option",2),s.qZA()(),s._uU(17," ]\n"),s.qZA(),s.TgZ(18,"section")(19,"mat-form-field")(20,"mat-label"),s._uU(21,"XOffset"),s.qZA(),s.TgZ(22,"input",3),s.NdJ("ngModelChange",function(i){return e.xOffset=i}),s.qZA()(),s.TgZ(23,"mat-form-field")(24,"mat-label"),s._uU(25,"YOffset"),s.qZA(),s.TgZ(26,"input",3),s.NdJ("ngModelChange",function(i){return e.yOffset=i}),s.qZA()()(),s.TgZ(27,"section")(28,"label"),s._uU(29,"TriggerEvent:"),s.qZA(),s.TgZ(30,"mat-radio-group",1),s.NdJ("ngModelChange",function(i){return e.triggerEvent=i}),s.TgZ(31,"mat-radio-button",4),s._uU(32,"Hover"),s.qZA(),s.TgZ(33,"mat-radio-button",5),s._uU(34,"Click"),s.qZA()()(),s.YNc(35,x,9,2,"section",6),s.TgZ(36,"section")(37,"mat-checkbox",1),s.NdJ("ngModelChange",function(i){return e.closeOnPanelClick=i}),s._uU(38,"CloseOnPanelClick"),s.qZA()(),s.YNc(39,I,3,1,"section",6),s.TgZ(40,"section")(41,"label"),s._uU(42,"Elevation:"),s.qZA(),s.TgZ(43,"mat-slider",7)(44,"input",8),s.NdJ("ngModelChange",function(i){return e.elevation=i}),s.qZA()()(),s.TgZ(45,"h2"),s._uU(46,"Result"),s.qZA(),s.YNc(47,S,3,1,"button",9),s.YNc(48,U,3,1,"button",10),s.TgZ(49,"mtx-popover",11,12)(51,"div",13),s._uU(52," A material design popover component created using Angular with the Angular CDK. "),s.qZA()()),2&t&&(s.xp6(9),s.Q6J("ngModel",e.positionStart),s.xp6(1),s.Q6J("ngForOf",e.positionStartOptions),s.xp6(5),s.Q6J("ngModel",e.positionEnd),s.xp6(1),s.Q6J("ngForOf",e.positionEndOptions),s.xp6(6),s.Q6J("ngModel",e.xOffset),s.xp6(4),s.Q6J("ngModel",e.yOffset),s.xp6(4),s.Q6J("ngModel",e.triggerEvent),s.xp6(5),s.Q6J("ngIf","hover"===e.triggerEvent),s.xp6(2),s.Q6J("ngModel",e.closeOnPanelClick),s.xp6(2),s.Q6J("ngIf","click"===e.triggerEvent),s.xp6(5),s.Q6J("ngModel",e.elevation),s.xp6(3),s.Q6J("ngIf","hover"===e.triggerEvent),s.xp6(1),s.Q6J("ngIf","click"===e.triggerEvent),s.xp6(1),s.Q6J("enterDelay",e.enterDelay)("leaveDelay",e.leaveDelay)("position",s.WLB(22,F,e.positionStart,e.positionEnd))("xOffset",e.xOffset)("yOffset",e.yOffset)("closeOnPanelClick",e.closeOnPanelClick)("closeOnBackdropClick",!0)("hasBackdrop",e.hasBackdrop)("elevation",e.elevation))},dependencies:[u.sg,u.O5,m.Fj,m.wV,m.JJ,m.On,b.Zt,C.ey,T.lW,q.oG,k.Nt,_.KE,_.hX,P.VQ,P.U0,Z.gD,f.pH,f.$5,d.hI,h.Qf],styles:[".mat-mdc-form-field[_ngcontent-%COMP%]{margin-right:1rem}.popover-position[_ngcontent-%COMP%]   .mat-mdc-form-field[_ngcontent-%COMP%]{width:120px;margin:0;font-size:14px}label[_ngcontent-%COMP%]{padding:0 8px}"]})}const J={title:"Configurable popover",component:E,files:[{file:"app.component.html",content:a(79778),filecontent:a(65618)},{file:"app.component.ts",content:a(61843),filecontent:a(94924)},{file:"app.component.scss",content:a(94791),filecontent:a(67708)}]};class M{constructor(l){this.elementRef=l}static#s=this.\u0275fac=function(t){return new(t||M)(s.Y36(s.SBq))};static#n=this.\u0275dir=s.lG2({type:M,selectors:[["mtx-popover-target"],["","mtxPopoverTarget",""]],exportAs:["mtxPopoverTarget"]})}class A{static#s=this.\u0275fac=function(t){return new(t||A)};static#n=this.\u0275cmp=s.Xpm({type:A,selectors:[["popover-example"]],decls:18,vars:5,consts:[[3,"ngModel","ngModelChange"],[3,"value"],["cdkDrag","","mat-raised-button","","color","primary",3,"mtxPopoverTriggerFor","mtxPopoverTargetAt"],["popoverTrigger","mtxPopoverTrigger"],["popover","mtxPopover"],[2,"max-width","300px"],["mtxPopoverTarget",""],["target1","mtxPopoverTarget"],["target2","mtxPopoverTarget"]],template:function(t,e){if(1&t&&(s.TgZ(0,"mat-radio-group",0),s.NdJ("ngModelChange",function(i){return e.target=i}),s.TgZ(1,"mat-radio-button",1),s._uU(2,"Target 1"),s.qZA(),s.TgZ(3,"mat-radio-button",1),s._uU(4,"Target 2"),s.qZA()(),s.TgZ(5,"button",2,3),s._uU(7," Show Popover\n"),s.qZA(),s.TgZ(8,"mtx-popover",null,4)(10,"div",5),s._uU(11," A material design popover component created using Angular with the Angular CDK. "),s.qZA()(),s.TgZ(12,"div",6,7),s._uU(14,"popover target directive"),s.qZA(),s.TgZ(15,"mtx-popover-target",null,8),s._uU(17,"popover target component"),s.qZA()),2&t){const g=s.MAs(9),i=s.MAs(13),z=s.MAs(16);s.Q6J("ngModel",e.target),s.xp6(1),s.Q6J("value",i),s.xp6(2),s.Q6J("value",z),s.xp6(2),s.Q6J("mtxPopoverTriggerFor",g)("mtxPopoverTargetAt",e.target)}},dependencies:[m.JJ,m.On,b.Zt,T.lW,P.VQ,P.U0,d.hI,h.Qf,M],styles:["[mtxPopoverTarget][_ngcontent-%COMP%], mtx-popover-target[_ngcontent-%COMP%]{display:flex;align-items:center;height:64px;padding:0 1em;margin-top:1em;background:whitesmoke;color:#000000de;font:500 20px/32px Roboto,Helvetica Neue,sans-serif}.mat-toolbar[_ngcontent-%COMP%]{margin-top:1em}.mat-mdc-button-base[_ngcontent-%COMP%]{margin:0 .5em}"]})}const B={title:"Popover target",component:A,files:[{file:"app.component.html",content:a(49787),filecontent:a(40552)},{file:"app.component.ts",content:a(9660),filecontent:a(22722)},{file:"app.component.scss",content:a(73140),filecontent:a(55726)}]};var Q=a(97905);function R(p,l){if(1&p&&(s.TgZ(0,"div"),s._uU(1," Lazy rendering with additional context data "),s.TgZ(2,"strong"),s._uU(3),s.qZA(),s._uU(4,". "),s.qZA()),2&p){const t=l.name;s.xp6(3),s.Oqu(t)}}const X=function(){return{name:"Sally"}},Y=function(){return{name:"Bob"}};class D{static#s=this.\u0275fac=function(t){return new(t||D)};static#n=this.\u0275cmp=s.Xpm({type:D,selectors:[["popover-example"]],decls:9,vars:6,consts:[["popover","mtxPopover"],["mtxPopoverContent",""],["mat-raised-button","","color","primary",3,"mtxPopoverTriggerFor","mtxPopoverTriggerData"],["popoverTrigger","mtxPopoverTrigger"]],template:function(t,e){if(1&t&&(s.TgZ(0,"mtx-popover",null,0),s.YNc(2,R,5,1,"ng-template",1),s.qZA(),s.TgZ(3,"button",2,3),s._uU(5," Show Sally's Popover\n"),s.qZA(),s.TgZ(6,"button",2,3),s._uU(8," Show Bob's Popover\n"),s.qZA()),2&t){const g=s.MAs(1);s.xp6(3),s.Q6J("mtxPopoverTriggerFor",g)("mtxPopoverTriggerData",s.DdM(4,X)),s.xp6(3),s.Q6J("mtxPopoverTriggerFor",g)("mtxPopoverTriggerData",s.DdM(5,Y))}},dependencies:[T.lW,d.hI,h.Qf,Q.dr],styles:[".mat-mdc-button-base[_ngcontent-%COMP%]{margin:0 .5em}"]})}const L={title:"Popover lazy rendering",component:D,files:[{file:"app.component.html",content:a(35911),filecontent:a(36583)},{file:"app.component.ts",content:a(18554),filecontent:a(86075)},{file:"app.component.scss",content:a(17944),filecontent:a(19781)}]};var N=a(22281),W=a(29241);function K(p,l){if(1&p&&(s.ynx(0),s._UZ(1,"example-viewer",2),s.BQk()),2&p){const t=l.$implicit;s.xp6(1),s.Q6J("exampleData",t)}}function H(p,l){if(1&p&&(s.ynx(0),s.YNc(1,K,2,1,"ng-container",1),s.BQk()),2&p){const t=l.ngIf;s.xp6(1),s.Q6J("ngForOf",t.examples)}}function V(p,l){if(1&p&&(s.ynx(0),s._UZ(1,"doc-viewer",1),s.BQk()),2&p){const t=l.ngIf;s.xp6(1),s.Q6J("textContent",t.content.default)}}class y{constructor(l){this.route=l}static#s=this.\u0275fac=function(t){return new(t||y)(s.Y36(n.gz))};static#n=this.\u0275cmp=s.Xpm({type:y,selectors:[["app-popover-overview"]],decls:2,vars:3,consts:[[4,"ngIf"],[4,"ngFor","ngForOf"],[3,"exampleData"]],template:function(t,e){1&t&&(s.YNc(0,H,2,1,"ng-container",0),s.ALo(1,"async")),2&t&&s.Q6J("ngIf",s.lcZ(1,1,e.route.data))},dependencies:[u.sg,u.O5,N.B,u.Ov],encapsulation:2})}class O{constructor(l){this.route=l}static#s=this.\u0275fac=function(t){return new(t||O)(s.Y36(n.gz))};static#n=this.\u0275cmp=s.Xpm({type:O,selectors:[["app-popover-api"]],decls:2,vars:3,consts:[[4,"ngIf"],[3,"textContent"]],template:function(t,e){1&t&&(s.YNc(0,V,2,1,"ng-container",0),s.ALo(1,"async")),2&t&&s.Q6J("ngIf",s.lcZ(1,1,e.route.data))},dependencies:[u.O5,W.z,u.Ov],encapsulation:2})}class w{static#s=this.\u0275fac=function(t){return new(t||w)};static#n=this.\u0275mod=s.oAB({type:w});static#a=this.\u0275inj=s.cJS({imports:[v.m8,n.Bz.forChild([{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:y,pathMatch:"full",data:{examples:[J,B,L]}},{path:"api",component:O,pathMatch:"full",data:{content:a(44160)}},{path:"**",redirectTo:"overview"}])]})}},29241:(r,o,a)=>{"use strict";a.d(o,{z:()=>v});var n=a(94650);class v{constructor(){this.textContent=""}ngOnDestroy(){}static#s=this.\u0275fac=function(m){return new(m||v)};static#n=this.\u0275cmp=n.Xpm({type:v,selectors:[["doc-viewer"]],inputs:{textContent:"textContent"},decls:1,vars:1,consts:[[1,"docs-markdown",3,"innerHTML"]],template:function(m,b){1&m&&n._UZ(0,"div",0),2&m&&n.Q6J("innerHTML",b.textContent,n.oJD)},styles:[".docs-markdown h1,.docs-markdown h2{font-weight:400}.docs-markdown h3{margin:40px 0 20px;padding-bottom:3px;font-weight:300;font-size:24px;line-height:32px}.docs-markdown h4{display:block;margin-top:28px;margin-bottom:16px;font-weight:700;font-size:20px;background:none}.docs-markdown h4 code{padding:0;background:none}.docs-markdown h5{font-size:15px}.docs-markdown h6{font-size:13px}.docs-markdown table{width:100%;margin:0 0 32px;border-collapse:collapse;border-radius:2px;border-spacing:0}.docs-markdown table code{padding:0;background-color:transparent}.docs-markdown th{max-width:100px;padding:13px 16px;font-weight:400;text-align:left}.docs-markdown td{padding:8px 16px;font-weight:400;font-size:14px}.docs-markdown pre{display:block;margin:16px auto;overflow-x:auto;border-radius:5px;white-space:pre-wrap;background:rgba(0,0,0,.01);border:.5px solid rgba(0,0,0,.2)}\n"],encapsulation:2})}},22281:(r,o,a)=>{"use strict";a.d(o,{B:()=>f});var n=a(94650),v=a(17009),s=a(27163),u=a(36895),m=a(4859),b=a(97392),C=a(3848),T=a(10266);const q=["demo"];function k(d,h){if(1&d){const c=n.EpF();n.TgZ(0,"mat-tab",11)(1,"div",12)(2,"div",13)(3,"button",14),n.NdJ("click",function(){n.CHM(c);const x=n.MAs(8),I=n.oxw(2);return n.KtG(I.copySource(x))}),n.TgZ(4,"mat-icon"),n._uU(5,"content_copy"),n.qZA()()(),n.TgZ(6,"div",15),n._UZ(7,"pre",16,17),n.qZA()()()}if(2&d){const c=h.$implicit;n.Q6J("label",c.file),n.xp6(3),n.Q6J("matTooltip","Copy example source"),n.xp6(4),n.Q6J("innerHtml",c.content,n.oJD)}}function _(d,h){if(1&d&&(n.TgZ(0,"div",8)(1,"mat-tab-group",9),n.YNc(2,k,9,3,"mat-tab",10),n.qZA()()),2&d){const c=n.oxw();n.xp6(2),n.Q6J("ngForOf",c.exampleData.files)}}function P(d,h){if(1&d&&n._UZ(0,"div",18),2&d){const c=n.oxw();n.Q6J("innerHtml",c.exampleData.description,n.oJD)}}function Z(d,h){}class f{constructor(h,c,j){this.snackbar=h,this.copier=c,this.componentFactoryResolver=j,this.showSource=!1}ngOnInit(){const h=this.componentFactoryResolver.resolveComponentFactory(this.exampleData.component);this.demoComponentRef=this.demoRef.createComponent(h)}ngOnDestroy(){this.demoComponentRef&&this.demoComponentRef.destroy()}toggleSourceView(){this.showSource=!this.showSource}copySource(h){this.copier.copyText(h.innerText)?this.snackbar.open("Code copied","",{duration:2500}):this.snackbar.open("Copy failed. Please try again!","",{duration:2500})}static#s=this.\u0275fac=function(c){return new(c||f)(n.Y36(v.ux),n.Y36(s.u),n.Y36(n._Vd))};static#n=this.\u0275cmp=n.Xpm({type:f,selectors:[["example-viewer"]],viewQuery:function(c,j){if(1&c&&n.Gf(q,7,n.s_b),2&c){let x;n.iGM(x=n.CRH())&&(j.demoRef=x.first)}},inputs:{type:"type",exampleData:"exampleData"},decls:13,vars:4,consts:[[1,"docs-example-viewer-wrapper"],[1,"docs-example-viewer-title"],[1,"docs-example-viewer-title-spacer"],["mat-icon-button","","type","button","aria-label","View source",3,"matTooltip","click"],["class","docs-example-viewer-source",4,"ngIf"],[1,"docs-example-viewer-body"],[3,"innerHtml",4,"ngIf"],["demo",""],[1,"docs-example-viewer-source"],["animationDuration","0ms","mat-stretch-tabs","false"],[3,"label",4,"ngFor","ngForOf"],[3,"label"],[1,"docs-example-source-wrapper"],[1,"button-bar"],["mat-icon-button","","type","button","title","Copy example source","aria-label","Copy example source to clipboard",1,"docs-example-source-copy","docs-example-button",3,"matTooltip","click"],[1,"code-snippet"],[1,"docs-example-source",3,"innerHtml"],["textContent",""],[3,"innerHtml"]],template:function(c,j){1&c&&(n.TgZ(0,"div",0)(1,"div",1)(2,"span"),n._uU(3),n.qZA(),n._UZ(4,"div",2),n.TgZ(5,"button",3),n.NdJ("click",function(){return j.toggleSourceView()}),n.TgZ(6,"mat-icon"),n._uU(7,"code"),n.qZA()()(),n.YNc(8,_,3,1,"div",4),n.TgZ(9,"div",5),n.YNc(10,P,1,1,"div",6),n.YNc(11,Z,0,0,"ng-template",null,7,n.W1O),n.qZA()()),2&c&&(n.xp6(3),n.Oqu(j.exampleData.title),n.xp6(2),n.Q6J("matTooltip","View source"),n.xp6(3),n.Q6J("ngIf",j.showSource),n.xp6(2),n.Q6J("ngIf",j.exampleData.description))},dependencies:[u.sg,u.O5,m.RK,b.Hw,C.uX,C.SP,T.gM],styles:["[_nghost-%COMP%]{display:block;padding:20px 0}.docs-example-viewer-wrapper[_ngcontent-%COMP%]{border-radius:4px}.docs-example-viewer-title[_ngcontent-%COMP%]{display:flex;align-content:center;align-items:center;justify-content:center;padding:8px 8px 8px 16px}.docs-example-viewer-title-spacer[_ngcontent-%COMP%]{flex:1 1 auto}.docs-example-viewer-body[_ngcontent-%COMP%]{padding:30px}.button-bar[_ngcontent-%COMP%]{float:right;padding:8px}.code-snippet[_ngcontent-%COMP%]{padding:20px}.docs-example-source[_ngcontent-%COMP%]{padding:0;margin:0;border:none;background:none;font-size:14px}"]})}},79778:r=>{r.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Popover configuration<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;popover-position&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Position:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  [\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Start<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;positionStart&quot;</span> (<span class="hljs-attr">ngModelChange</span>)=<span class="hljs-string">&quot;onPositionStartChange()&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of positionStartOptions&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  ,\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>End<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-select</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;positionEnd&quot;</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">mat-option</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of positionEndOptions&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>{{item}}<span class="hljs-tag">&lt;/<span class="hljs-name">mat-option</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-select</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  ]\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>XOffset<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;xOffset&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>YOffset<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;yOffset&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>TriggerEvent:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;triggerEvent&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hover&quot;</span>&gt;</span>Hover<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>Click<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;triggerEvent===&#x27;hover&#x27;&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>EnterDelay<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;enterDelay&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>LeaveDelay<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;leaveDelay&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>&gt;</span>CloseOnPanelClick<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;triggerEvent===&#x27;click&#x27;&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;hasBackdrop&quot;</span>&gt;</span>HasBackdrop<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Elevation:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-slider</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">discrete</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matSliderThumb</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;elevation&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-slider</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Result<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;triggerEvent===&#x27;hover&#x27;&quot;</span> <span class="hljs-attr">cdkDrag</span>\n        <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        #<span class="hljs-attr">popoverTrigger</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover&quot;</span>\n        <span class="hljs-attr">mtxPopoverTriggerOn</span>=<span class="hljs-string">&quot;hover&quot;</span>&gt;</span>\n  Show Popover With Hover\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;triggerEvent===&#x27;click&#x27;&quot;</span> <span class="hljs-attr">cdkDrag</span>\n        <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        #<span class="hljs-attr">popoverTrigger2</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover&quot;</span>\n        <span class="hljs-attr">mtxPopoverTriggerOn</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>\n  Show Popover With Click\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover</span> #<span class="hljs-attr">popover</span>=<span class="hljs-string">&quot;mtxPopover&quot;</span>\n             [<span class="hljs-attr">enterDelay</span>]=<span class="hljs-string">&quot;enterDelay&quot;</span>\n             [<span class="hljs-attr">leaveDelay</span>]=<span class="hljs-string">&quot;leaveDelay&quot;</span>\n             [<span class="hljs-attr">position</span>]=<span class="hljs-string">&quot;[positionStart, positionEnd]&quot;</span>\n             [<span class="hljs-attr">xOffset</span>]=<span class="hljs-string">&quot;xOffset&quot;</span>\n             [<span class="hljs-attr">yOffset</span>]=<span class="hljs-string">&quot;yOffset&quot;</span>\n             [<span class="hljs-attr">closeOnPanelClick</span>]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>\n             [<span class="hljs-attr">closeOnBackdropClick</span>]=<span class="hljs-string">&quot;true&quot;</span>\n             [<span class="hljs-attr">hasBackdrop</span>]=<span class="hljs-string">&quot;hasBackdrop&quot;</span>\n             [<span class="hljs-attr">elevation</span>]=<span class="hljs-string">&quot;elevation&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width: 300px;&quot;</span>&gt;</span>\n    A material design popover component created using Angular with the Angular CDK.\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover</span>&gt;</span>\n'},35911:r=>{r.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover</span> #<span class="hljs-attr">popover</span>=<span class="hljs-string">&quot;mtxPopover&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> <span class="hljs-attr">mtxPopoverContent</span> <span class="hljs-attr">let-name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      Lazy rendering with additional context data <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{name}}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        #<span class="hljs-attr">popoverTrigger</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerData</span>]=<span class="hljs-string">&quot;{name: &#x27;Sally&#x27;}&quot;</span>&gt;</span>\n  Show Sally&#x27;s Popover\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        #<span class="hljs-attr">popoverTrigger</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerData</span>]=<span class="hljs-string">&quot;{name: &#x27;Bob&#x27;}&quot;</span>&gt;</span>\n  Show Bob&#x27;s Popover\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n'},49787:r=>{r.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;target1&quot;</span>&gt;</span>Target 1<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;target2&quot;</span>&gt;</span>Target 2<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">cdkDrag</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        #<span class="hljs-attr">popoverTrigger</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTargetAt</span>]=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>\n  Show Popover\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover</span> #<span class="hljs-attr">popover</span>=<span class="hljs-string">&quot;mtxPopover&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;max-width: 300px;&quot;</span>&gt;</span>\n    A material design popover component created using Angular with the Angular CDK.\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">mtxPopoverTarget</span> #<span class="hljs-attr">target1</span>=<span class="hljs-string">&quot;mtxPopoverTarget&quot;</span>&gt;</span>popover target directive<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover-target</span> #<span class="hljs-attr">target2</span>=<span class="hljs-string">&quot;mtxPopoverTarget&quot;</span>&gt;</span>popover target component<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover-target</span>&gt;</span>\n'},94791:r=>{r.exports='<span class="hljs-selector-class">.mat-mdc-form-field</span> {\n  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">1rem</span>;\n}\n\n<span class="hljs-selector-class">.popover-position</span> {\n  <span class="hljs-selector-class">.mat-mdc-form-field</span> {\n    <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;\n    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;\n    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;\n  }\n}\n\n<span class="hljs-selector-tag">label</span> {\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span>;\n}\n'},17944:r=>{r.exports='<span class="hljs-selector-class">.mat-mdc-button-base</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">5em</span>;\n}\n'},73140:r=>{r.exports='<span class="hljs-selector-attr">[mtxPopoverTarget]</span>,\nmtx-popover-target {\n  <span class="hljs-attribute">display</span>: flex;\n  <span class="hljs-attribute">align-items</span>: center;\n  <span class="hljs-attribute">height</span>: <span class="hljs-number">64px</span>;\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">1em</span>;\n  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1em</span>;\n  <span class="hljs-attribute">background</span>: whitesmoke;\n  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">87</span>);\n  <span class="hljs-attribute">font</span>: <span class="hljs-number">500</span> <span class="hljs-number">20px</span> / <span class="hljs-number">32px</span> Roboto, <span class="hljs-string">&#x27;Helvetica Neue&#x27;</span>, sans-serif;\n}\n\n<span class="hljs-selector-class">.mat-toolbar</span> {\n  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">1em</span>;\n}\n\n<span class="hljs-selector-class">.mat-mdc-button-base</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">5em</span>;\n}\n'},61843:r=>{r.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">OnInit</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> {\n  <span class="hljs-title class_">MtxPopoverPositionEnd</span>,\n  <span class="hljs-title class_">MtxPopoverPositionStart</span>,\n  <span class="hljs-title class_">MtxPopoverTriggerEvent</span>,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/popover&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;popover-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> {\n  <span class="hljs-attr">triggerEvent</span>: <span class="hljs-title class_">MtxPopoverTriggerEvent</span> = <span class="hljs-string">&#x27;hover&#x27;</span>;\n  enterDelay = <span class="hljs-number">100</span>;\n  leaveDelay = <span class="hljs-number">100</span>;\n  xOffset = <span class="hljs-number">0</span>;\n  yOffset = <span class="hljs-number">0</span>;\n  closeOnPanelClick = <span class="hljs-literal">false</span>;\n  hasBackdrop = <span class="hljs-literal">true</span>;\n  elevation = <span class="hljs-number">8</span>;\n\n  positionXOptions = [<span class="hljs-string">&#x27;before&#x27;</span>, <span class="hljs-string">&#x27;after&#x27;</span>];\n  positionYOptions = [<span class="hljs-string">&#x27;above&#x27;</span>, <span class="hljs-string">&#x27;below&#x27;</span>];\n\n  positionStartOptions = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionYOptions</span>, ...<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionXOptions</span>];\n  <span class="hljs-attr">positionEndOptions</span>: <span class="hljs-built_in">any</span>[] = [];\n\n  <span class="hljs-attr">positionStart</span>: <span class="hljs-title class_">MtxPopoverPositionStart</span> = <span class="hljs-string">&#x27;below&#x27;</span>;\n  <span class="hljs-attr">positionEnd</span>: <span class="hljs-title class_">MtxPopoverPositionEnd</span> = <span class="hljs-string">&#x27;after&#x27;</span>;\n\n  <span class="hljs-title function_">onPositionStartChange</span>(<span class="hljs-params">value?: <span class="hljs-built_in">string</span></span>) {\n    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionXOptions</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionStart</span>)) {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">positionEnd</span> = <span class="hljs-string">&#x27;below&#x27;</span>;\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">positionEndOptions</span> = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionYOptions</span>, <span class="hljs-string">&#x27;center&#x27;</span>];\n    }\n\n    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionYOptions</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionStart</span>)) {\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">positionEnd</span> = <span class="hljs-string">&#x27;after&#x27;</span>;\n      <span class="hljs-variable language_">this</span>.<span class="hljs-property">positionEndOptions</span> = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">positionXOptions</span>, <span class="hljs-string">&#x27;center&#x27;</span>];\n    }\n  }\n\n  <span class="hljs-title function_">ngOnInit</span>(<span class="hljs-params"></span>) {\n    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onPositionStartChange</span>();\n  }\n}\n'},18554:r=>{r.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;popover-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {}\n'},9660:r=>{r.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;popover-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\n  <span class="hljs-attr">target</span>: <span class="hljs-built_in">any</span>;\n}\n'},44160:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n='<h1 id="popover">Popover</h1>\n<h2 id="api-reference-for-material-extensions-popover">API reference for Material Extensions Popover</h2>\n<p><code>import { MtxPopoverModule } from &apos;@ng-matero/extensions/popover&apos;;</code></p>\n<h3 id="directives">Directives</h3>\n<h4 id="mtxpopover"><code>MtxPopover</code></h4>\n<p>Selector: <code>[mtx-popover]</code></p>\n<p>Exported as: <code>mtxPopover</code></p>\n<h5 id="properties">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input(&apos;aria-describedby&apos;)</code><br><code>ariaDescribedby: string</code></td>\n<td align="left">aria-describedby for the popover panel.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input(&apos;aria-label&apos;)</code><br><code>ariaLabel: string</code></td>\n<td align="left">aria-label for the popover panel.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input(&apos;aria-labelledby&apos;)</code><br><code>ariaLabelledby: string</code></td>\n<td align="left">aria-labelledby for the popover panel.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>triggerEvent: MtxPopoverTriggerEvent</code></td>\n<td align="left">Popover&apos;s trigger event. Default is <strong><code>hover</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>enterDelay: number</code></td>\n<td align="left">Popover&apos;s enter delay. Only support hover event. Default is <strong><code>100</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>leaveDelay: number</code></td>\n<td align="left">Popover&apos;s leave delay. Only support hover event. Default is <strong><code>100</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>position: MtxPopoverPosition</code></td>\n<td align="left">Popover&apos;s position. Default is <strong><code>[&apos;below&apos;, &apos;after&apos;]</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>xOffset: number</code></td>\n<td align="left">Popover-panel&apos;s X offset. Default is <strong><code>0</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>yOffset: number</code></td>\n<td align="left">Popover-panel&apos;s Y offset. Default is <strong><code>0</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>arrowWidth: number</code></td>\n<td align="left">Popover-arrow&apos;s width. Default is <strong><code>16</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>arrowHeight: number</code></td>\n<td align="left">Popover-arrow&apos;s height. Default is <strong><code>16</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>arrowOffsetX: number</code></td>\n<td align="left">Popover-arrow&apos;s X offset. Default is <strong><code>20</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>arrowOffsetY: number</code></td>\n<td align="left">Popover-arrow&apos;s Y offset. Default is <strong><code>20</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>closeOnPanelClick: boolean</code></td>\n<td align="left">Whether popover can be closed when click the popover-panel. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>closeOnBackdropClick: boolean</code></td>\n<td align="left">Whether popover can be closed when click the backdrop. Default is <strong><code>true</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>focusTrapEnabled: boolean</code></td>\n<td align="left">Whether the popover should focus trap. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>focusTrapAutoCaptureEnabled: boolean</code></td>\n<td align="left">Whether the popover should focus trap auto capture. Default is <strong><code>false</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>backdropClass: string</code></td>\n<td align="left">Class to be added to the backdrop element.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>hasBackdrop: boolean | undefined</code></td>\n<td align="left">Whether the popover has a backdrop. It will always be false if the trigger event is hover.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input(&apos;class&apos;)</code><br><code>panelClass: string</code></td>\n<td align="left">This method takes classes set on the host mtx-popover element and applies them on the popover template that displays in the overlay container. Otherwise, it&apos;s difficult to style the containing popover from outside the component.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>elevation: number</code></td>\n<td align="left">Popover-panel&apos;s elevation (0~24). Default is <strong><code>8</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output()</code><br><code>closed: EventEmitter&lt;PopoverCloseReason&gt;</code></td>\n<td align="left">Event emitted when the popover is closed.</td>\n</tr>\n</tbody></table>\n<h4 id="mtxpopovertrigger"><code>MtxPopoverTrigger</code></h4>\n<p>Selector: <code>[mtxPopoverTriggerFor]</code></p>\n<p>Exported as: <code>mtxPopoverTrigger</code></p>\n<h5 id="properties-1">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>mtxPopoverTriggerFor: MtxPopoverPanel</code></td>\n<td align="left">References the popover instance that the trigger is associated with.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>mtxPopoverTriggerOn: MtxPopoverTriggerEvent</code></td>\n<td align="left">Event for triggering popover click, hover and none. Default is <strong><code>&apos;hover&apos;</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>mtxPopoverTargetAt: MtxPopoverTarget</code></td>\n<td align="left">References the popover target instance that the popover positioning is associated with.</td>\n</tr>\n</tbody></table>\n<h4 id="mtxpopovertarget"><code>MtxPopoverTarget</code></h4>\n<p>Selector: <code>mtx-popover-target, [mtxPopoverTarget]</code></p>\n<p>Exported as: <code>mtxPopoverTarget</code></p>\n<h3 id="interfaces">Interfaces</h3>\n<h4 id="mtxpopoverconfig"><code>MtxPopoverConfig</code></h4>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MtxPopoverDefaultOptions</span> {\n  triggerEvent?: <span class="hljs-title class_">MtxPopoverTriggerEvent</span>;\n  enterDelay?: <span class="hljs-built_in">number</span>;\n  leaveDelay?: <span class="hljs-built_in">number</span>;\n  position?: <span class="hljs-title class_">MtxPopoverPosition</span>;\n  xOffset?: <span class="hljs-built_in">number</span>;\n  yOffset?: <span class="hljs-built_in">number</span>;\n  arrowWidth?: <span class="hljs-built_in">number</span>;\n  arrowHeight?: <span class="hljs-built_in">number</span>;\n  arrowOffsetX?: <span class="hljs-built_in">number</span>;\n  arrowOffsetY?: <span class="hljs-built_in">number</span>;\n  closeOnPanelClick?: <span class="hljs-built_in">boolean</span>;\n  closeOnBackdropClick?: <span class="hljs-built_in">boolean</span>;\n  overlayPanelClass?: <span class="hljs-built_in">string</span>;\n  backdropClass?: <span class="hljs-built_in">string</span>;\n  hasBackdrop?: <span class="hljs-built_in">boolean</span>;\n  focusTrapEnabled?: <span class="hljs-built_in">boolean</span>;\n  focusTrapAutoCaptureEnabled?: <span class="hljs-built_in">boolean</span>;\n  elevation?: <span class="hljs-built_in">number</span>;\n}\n</pre>\n<h3 id="type-aliases">Type aliases</h3>\n<h4 id="mtxpopoverpositionstart"><code>MtxPopoverPositionStart</code></h4>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MtxPopoverPositionStart</span> = <span class="hljs-string">&apos;above&apos;</span> | <span class="hljs-string">&apos;below&apos;</span> | <span class="hljs-string">&apos;before&apos;</span> | <span class="hljs-string">&apos;after&apos;</span>;\n</pre>\n<h4 id="mtxpopoverpositionend"><code>MtxPopoverPositionEnd</code></h4>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MtxPopoverPositionEnd</span> = <span class="hljs-title class_">MtxPopoverPositionStart</span> | <span class="hljs-string">&apos;center&apos;</span>;\n</pre>\n<h4 id="mtxpopoverposition"><code>MtxPopoverPosition</code></h4>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MtxPopoverPosition</span> = [<span class="hljs-title class_">MtxPopoverPositionStart</span>, <span class="hljs-title class_">MtxPopoverPositionEnd</span>];\n</pre>\n<h4 id="mtxpopovertriggerevent"><code>MtxPopoverTriggerEvent</code></h4>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">MtxPopoverTriggerEvent</span> = <span class="hljs-string">&apos;click&apos;</span> | <span class="hljs-string">&apos;hover&apos;</span> | <span class="hljs-string">&apos;none&apos;</span>;\n</pre>\n<h3 id="constants">Constants</h3>\n<h4 id="mtx_popover_default_options"><code>MTX_POPOVER_DEFAULT_OPTIONS</code></h4>\n<p>Injection token to be used to override the default options for <code>mtx-popover</code>.</p>\n<pre class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-attr">MTX_POPOVER_DEFAULT_OPTIONS</span>: <span class="hljs-title class_">InjectionToken</span>&lt;<span class="hljs-title class_">MtxPopoverDefaultOptions</span>&gt;;\n</pre>\n<h4 id="mtx_popover_scroll_strategy"><code>MTX_POPOVER_SCROLL_STRATEGY</code></h4>\n<p>Injection token that determines the scroll handling while the popover is open.</p>\n<pre class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-attr">MTX_POPOVER_SCROLL_STRATEGY</span>: <span class="hljs-title class_">InjectionToken</span>&lt;<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">ScrollStrategy</span>&gt;;\n</pre>\n<h4 id="mtx_popover_content"><code>MTX_POPOVER_CONTENT</code></h4>\n<p>Injection token that can be used to reference instances of <code>MtxPopoverContent</code>. It serves as alternative token to the actual <code>MtxPopoverContent</code> class which could cause unnecessary retention of the class and its directive metadata.</p>\n<pre class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-attr">MTX_POPOVER_CONTENT</span>: <span class="hljs-title class_">InjectionToken</span>&lt;<span class="hljs-title class_">MtxPopoverContent</span>&gt;;\n</pre>\n'},65618:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n='<h2>Popover configuration</h2>\n\n<section class="popover-position">\n  <label>Position:</label>\n  [\n  <mat-form-field>\n    <mat-label>Start</mat-label>\n    <mat-select [(ngModel)]="positionStart" (ngModelChange)="onPositionStartChange()">\n      <mat-option *ngFor="let item of positionStartOptions" [value]="item">{{item}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n  ,\n  <mat-form-field>\n    <mat-label>End</mat-label>\n    <mat-select [(ngModel)]="positionEnd">\n      <mat-option *ngFor="let item of positionEndOptions" [value]="item">{{item}}</mat-option>\n    </mat-select>\n  </mat-form-field>\n  ]\n</section>\n\n<section>\n  <mat-form-field>\n    <mat-label>XOffset</mat-label>\n    <input matInput type="number" [(ngModel)]="xOffset">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>YOffset</mat-label>\n    <input matInput type="number" [(ngModel)]="yOffset">\n  </mat-form-field>\n</section>\n\n<section>\n  <label>TriggerEvent:</label>\n  <mat-radio-group [(ngModel)]="triggerEvent">\n    <mat-radio-button value="hover">Hover</mat-radio-button>\n    <mat-radio-button value="click">Click</mat-radio-button>\n  </mat-radio-group>\n</section>\n\n<section *ngIf="triggerEvent===\'hover\'">\n  <mat-form-field>\n    <mat-label>EnterDelay</mat-label>\n    <input matInput type="number" [(ngModel)]="enterDelay">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>LeaveDelay</mat-label>\n    <input matInput type="number" [(ngModel)]="leaveDelay">\n  </mat-form-field>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="closeOnPanelClick">CloseOnPanelClick</mat-checkbox>\n</section>\n\n<section *ngIf="triggerEvent===\'click\'">\n  <mat-checkbox [(ngModel)]="hasBackdrop">HasBackdrop</mat-checkbox>\n</section>\n\n<section>\n  <label>Elevation:</label>\n  <mat-slider min="0" max="24" discrete>\n    <input matSliderThumb [(ngModel)]="elevation">\n  </mat-slider>\n</section>\n\n<h2>Result</h2>\n\n<button *ngIf="triggerEvent===\'hover\'" cdkDrag\n        mat-raised-button color="primary"\n        #popoverTrigger="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover"\n        mtxPopoverTriggerOn="hover">\n  Show Popover With Hover\n</button>\n\n<button *ngIf="triggerEvent===\'click\'" cdkDrag\n        mat-raised-button color="primary"\n        #popoverTrigger2="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover"\n        mtxPopoverTriggerOn="click">\n  Show Popover With Click\n</button>\n\n<mtx-popover #popover="mtxPopover"\n             [enterDelay]="enterDelay"\n             [leaveDelay]="leaveDelay"\n             [position]="[positionStart, positionEnd]"\n             [xOffset]="xOffset"\n             [yOffset]="yOffset"\n             [closeOnPanelClick]="closeOnPanelClick"\n             [closeOnBackdropClick]="true"\n             [hasBackdrop]="hasBackdrop"\n             [elevation]="elevation">\n  <div style="max-width: 300px;">\n    A material design popover component created using Angular with the Angular CDK.\n  </div>\n</mtx-popover>\n'},67708:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n=".mat-mdc-form-field {\n  margin-right: 1rem;\n}\n\n.popover-position {\n  .mat-mdc-form-field {\n    width: 120px;\n    margin: 0;\n    font-size: 14px;\n  }\n}\n\nlabel {\n  padding: 0 8px;\n}\n"},94924:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n="import { Component, OnInit } from '@angular/core';\nimport {\n  MtxPopoverPositionEnd,\n  MtxPopoverPositionStart,\n  MtxPopoverTriggerEvent,\n} from '@ng-matero/extensions/popover';\n\n@Component({\n  selector: 'popover-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  triggerEvent: MtxPopoverTriggerEvent = 'hover';\n  enterDelay = 100;\n  leaveDelay = 100;\n  xOffset = 0;\n  yOffset = 0;\n  closeOnPanelClick = false;\n  hasBackdrop = true;\n  elevation = 8;\n\n  positionXOptions = ['before', 'after'];\n  positionYOptions = ['above', 'below'];\n\n  positionStartOptions = [...this.positionYOptions, ...this.positionXOptions];\n  positionEndOptions: any[] = [];\n\n  positionStart: MtxPopoverPositionStart = 'below';\n  positionEnd: MtxPopoverPositionEnd = 'after';\n\n  onPositionStartChange(value?: string) {\n    if (this.positionXOptions.includes(this.positionStart)) {\n      this.positionEnd = 'below';\n      this.positionEndOptions = [...this.positionYOptions, 'center'];\n    }\n\n    if (this.positionYOptions.includes(this.positionStart)) {\n      this.positionEnd = 'after';\n      this.positionEndOptions = [...this.positionXOptions, 'center'];\n    }\n  }\n\n  ngOnInit() {\n    this.onPositionStartChange();\n  }\n}\n"},36583:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n='<mtx-popover #popover="mtxPopover">\n  <ng-template mtxPopoverContent let-name="name">\n    <div>\n      Lazy rendering with additional context data <strong>{{name}}</strong>.\n    </div>\n  </ng-template>\n</mtx-popover>\n\n<button mat-raised-button color="primary"\n        #popoverTrigger="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover"\n        [mtxPopoverTriggerData]="{name: \'Sally\'}">\n  Show Sally\'s Popover\n</button>\n\n<button mat-raised-button color="primary"\n        #popoverTrigger="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover"\n        [mtxPopoverTriggerData]="{name: \'Bob\'}">\n  Show Bob\'s Popover\n</button>\n'},19781:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n=".mat-mdc-button-base {\n  margin: 0 .5em;\n}\n"},86075:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n="import { Component } from '@angular/core';\n\n@Component({\n  selector: 'popover-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n"},40552:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n='<mat-radio-group [(ngModel)]="target">\n  <mat-radio-button [value]="target1">Target 1</mat-radio-button>\n  <mat-radio-button [value]="target2">Target 2</mat-radio-button>\n</mat-radio-group>\n\n<button cdkDrag mat-raised-button color="primary"\n        #popoverTrigger="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover"\n        [mtxPopoverTargetAt]="target">\n  Show Popover\n</button>\n\n<mtx-popover #popover="mtxPopover">\n  <div style="max-width: 300px;">\n    A material design popover component created using Angular with the Angular CDK.\n  </div>\n</mtx-popover>\n\n<div mtxPopoverTarget #target1="mtxPopoverTarget">popover target directive</div>\n\n<mtx-popover-target #target2="mtxPopoverTarget">popover target component</mtx-popover-target>\n'},55726:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n="[mtxPopoverTarget],\nmtx-popover-target {\n  display: flex;\n  align-items: center;\n  height: 64px;\n  padding: 0 1em;\n  margin-top: 1em;\n  background: whitesmoke;\n  color: rgba(0, 0, 0, .87);\n  font: 500 20px / 32px Roboto, 'Helvetica Neue', sans-serif;\n}\n\n.mat-toolbar {\n  margin-top: 1em;\n}\n\n.mat-mdc-button-base {\n  margin: 0 .5em;\n}\n"},22722:(r,o,a)=>{"use strict";a.r(o),a.d(o,{default:()=>n});const n="import { Component } from '@angular/core';\n\n@Component({\n  selector: 'popover-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  target: any;\n}\n"}}]);