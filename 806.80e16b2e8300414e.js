(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[806],{38806:(p,l,n)=>{"use strict";n.r(l),n.d(l,{ColorPickerApiComponent:()=>A,ColorPickerModule:()=>R,ColorPickerOverviewComponent:()=>y});var r=n(52787),T=n(89488),s=n(19212),x=n(56223),C=n(2032),d=n(64170),b=n(87466),j=n(80386),k=n(62442),u=n(22162);const _={title:"Basic",component:(()=>{class a{constructor(){this.color="#3f51b5",this.format="hex"}static#s=this.\u0275fac=function(e){return new(e||a)};static#t=this.\u0275cmp=s.Xpm({type:a,selectors:[["color-picker-example"]],decls:23,vars:5,consts:[[3,"ngModel","ngModelChange"],["value","hex"],["value","rgb"],["value","hsl"],["value","hsv"],["matInput","",3,"ngModel","mtxColorpicker","format","ngModelChange"],["matSuffix","",3,"for"],["picker",""]],template:function(e,o){if(1&e&&(s.TgZ(0,"div")(1,"label"),s._uU(2,"Color Format"),s.qZA(),s.TgZ(3,"mat-radio-group",0),s.NdJ("ngModelChange",function(i){return o.format=i}),s.TgZ(4,"mat-radio-button",1),s._uU(5,"HEX"),s.qZA(),s.TgZ(6,"mat-radio-button",2),s._uU(7,"RGB"),s.qZA(),s.TgZ(8,"mat-radio-button",3),s._uU(9,"HSL"),s.qZA(),s.TgZ(10,"mat-radio-button",4),s._uU(11,"HSV"),s.qZA()()(),s.TgZ(12,"mat-form-field")(13,"mat-label"),s._uU(14,"Color picker"),s.qZA(),s.TgZ(15,"input",5),s.NdJ("ngModelChange",function(i){return o.color=i}),s.qZA(),s._UZ(16,"mtx-colorpicker-toggle",6)(17,"mtx-colorpicker",null,7),s.TgZ(19,"mat-hint"),s._uU(20,"Choose your favorite color"),s.qZA(),s.TgZ(21,"mat-error"),s._uU(22,"Please enter the color"),s.qZA()()),2&e){const c=s.MAs(18);s.xp6(3),s.Q6J("ngModel",o.format),s.xp6(12),s.Q6J("ngModel",o.color)("mtxColorpicker",c)("format",o.format),s.xp6(1),s.Q6J("for",c)}},dependencies:[x.Fj,x.JJ,x.On,C.Nt,d.KE,d.hX,d.bx,d.TO,d.R9,b.VQ,b.U0,j.YK,k.zA,u.s]})}return a})(),files:[{file:"app.component.html",content:n(16461),filecontent:n(64132)},{file:"app.component.ts",content:n(22236),filecontent:n(23777)},{file:"app.component.scss",content:n(77095),filecontent:n(24476)}]},M={title:"Disabled",component:(()=>{class a{static#s=this.\u0275fac=function(e){return new(e||a)};static#t=this.\u0275cmp=s.Xpm({type:a,selectors:[["color-picker-example"]],decls:24,vars:6,consts:[["matInput","","disabled","",3,"mtxColorpicker"],["matSuffix","",3,"for"],["cp1",""],["matInput","",3,"mtxColorpicker"],["matSuffix","","disabled","",3,"for"],["cp2",""],["disabled","false"],["cp3",""]],template:function(e,o){if(1&e&&(s.TgZ(0,"p")(1,"mat-form-field")(2,"mat-label"),s._uU(3,"Color picker"),s.qZA(),s._UZ(4,"input",0)(5,"mtx-colorpicker-toggle",1)(6,"mtx-colorpicker",null,2),s.qZA()(),s.TgZ(8,"p")(9,"mat-form-field")(10,"mat-label"),s._uU(11,"Color picker"),s.qZA(),s._UZ(12,"input",3)(13,"mtx-colorpicker-toggle",4)(14,"mtx-colorpicker",null,5),s.qZA()(),s.TgZ(16,"p")(17,"mat-form-field")(18,"mat-label"),s._uU(19,"Color picker"),s.qZA(),s._UZ(20,"input",0)(21,"mtx-colorpicker-toggle",1)(22,"mtx-colorpicker",6,7),s.qZA()()),2&e){const c=s.MAs(7),i=s.MAs(15),P=s.MAs(23);s.xp6(4),s.Q6J("mtxColorpicker",c),s.xp6(1),s.Q6J("for",c),s.xp6(7),s.Q6J("mtxColorpicker",i),s.xp6(1),s.Q6J("for",i),s.xp6(7),s.Q6J("mtxColorpicker",P),s.xp6(1),s.Q6J("for",P)}},dependencies:[C.Nt,d.KE,d.hX,d.R9,j.YK,k.zA,u.s]})}return a})(),files:[{file:"app.component.html",content:n(7440),filecontent:n(33393)},{file:"app.component.ts",content:n(86560),filecontent:n(74372)},{file:"app.component.scss",content:n(85401),filecontent:n(9394)}]};var w=n(30617);const S={title:"Custom Icon",component:(()=>{class a{static#s=this.\u0275fac=function(e){return new(e||a)};static#t=this.\u0275cmp=s.Xpm({type:a,selectors:[["color-picker-example"]],decls:9,vars:2,consts:[["matInput","",3,"mtxColorpicker"],["matSuffix","",3,"for"],["mtxColorpickerToggleIcon",""],["picker",""]],template:function(e,o){if(1&e&&(s.TgZ(0,"mat-form-field")(1,"mat-label"),s._uU(2,"Color picker"),s.qZA(),s._UZ(3,"input",0),s.TgZ(4,"mtx-colorpicker-toggle",1)(5,"mat-icon",2),s._uU(6,"keyboard_arrow_down"),s.qZA()(),s._UZ(7,"mtx-colorpicker",null,3),s.qZA()),2&e){const c=s.MAs(8);s.xp6(3),s.Q6J("mtxColorpicker",c),s.xp6(1),s.Q6J("for",c)}},dependencies:[w.Hw,C.Nt,d.KE,d.hX,d.R9,j.YK,k.zA,u.s,u.q]})}return a})(),files:[{file:"app.component.html",content:n(42185),filecontent:n(95534)},{file:"app.component.ts",content:n(78150),filecontent:n(56527)},{file:"app.component.scss",content:n(83501),filecontent:n(72224)}]};var v=n(24084),h=n(49406),g=n(96814);const f=(a,m)=>({input:a,label:m});function E(a,m){if(1&a){const t=s.EpF();s.TgZ(0,"div",8)(1,"color-editable-input",9),s.NdJ("onChange",function(o){s.CHM(t);const c=s.oxw();return s.KtG(c.handleChange(o))}),s.qZA()()}if(2&a){const t=s.oxw();s.xp6(1),s.Akn(s.WLB(5,f,t.input,t.label)),s.Q6J("value",t.round(100*t.rgb.a))("dragLabel",!0)("dragMax",100)}}function Z(a,m){if(1&a){const t=s.EpF();s.TgZ(0,"div",2)(1,"color-swatch",3),s.NdJ("onClick",function(o){s.CHM(t);const c=s.oxw();return s.KtG(c.handleClick(o))})("onHover",function(o){s.CHM(t);const c=s.oxw();return s.KtG(c.onSwatchHover.emit(o))}),s.qZA()()}if(2&a){const t=m.$implicit,e=s.oxw();s.xp6(1),s.Akn(e.swatchStyle),s.Q6J("color",e.normalizeValue(t).color)("focusStyle",e.focusStyle(t))}}function O(a,m){if(1&a){const t=s.EpF();s.TgZ(0,"div",12)(1,"color-alpha",13),s.NdJ("onChange",function(o){s.CHM(t);const c=s.oxw();return s.KtG(c.handleValueChange(o))}),s.qZA()()}if(2&a){const t=s.oxw();s.xp6(1),s.Q6J("radius",2)("rgb",t.rgb)("hsl",t.hsl)}}function F(a,m){if(1&a){const t=s.EpF();s.TgZ(0,"div",14)(1,"color-sketch-preset-colors",15),s.NdJ("onClick",function(o){s.CHM(t);const c=s.oxw();return s.KtG(c.handleBlockChange(o))})("onSwatchHover",function(o){s.CHM(t);const c=s.oxw();return s.KtG(c.onSwatchHover.emit(o))}),s.qZA()()}if(2&a){const t=s.oxw();s.xp6(1),s.Q6J("colors",t.presetColors)}}let I=(()=>{class a{hsl;rgb;hex;disableAlpha=!1;onChange=new s.vpe;input={width:"100%",padding:"4px 10% 3px",border:"none",boxSizing:"border-box",boxShadow:"inset 0 0 0 1px #ccc",fontSize:"11px"};label={display:"block",textAlign:"center",fontSize:"11px",color:"#222",paddingTop:"3px",paddingBottom:"4px",textTransform:"capitalize"};round(t){return Math.round(t)}handleChange({data:t,$event:e}){if(t.hex){if((0,h.FX)(t.hex)){const o=new v.C(t.hex);this.onChange.emit({data:{hex:this.disableAlpha||t.hex.length<=6?o.toHex():o.toHex8(),source:"hex"},$event:e})}}else t.r||t.g||t.b?this.onChange.emit({data:{r:t.r||this.rgb.r,g:t.g||this.rgb.g,b:t.b||this.rgb.b,source:"rgb"},$event:e}):t.a?(t.a<0?t.a=0:t.a>100&&(t.a=100),t.a/=100,this.disableAlpha&&(t.a=1),this.onChange.emit({data:{h:this.hsl.h,s:this.hsl.s,l:this.hsl.l,a:Math.round(100*t.a)/100,source:"rgb"},$event:e})):(t.h||t.s||t.l)&&this.onChange.emit({data:{h:t.h||this.hsl.h,s:Number(t.s&&t.s||this.hsl.s),l:Number(t.l&&t.l||this.hsl.l),source:"hsl"},$event:e})}static \u0275fac=function(e){return new(e||a)};static \u0275cmp=s.Xpm({type:a,selectors:[["color-sketch-fields"]],inputs:{hsl:"hsl",rgb:"rgb",hex:"hex",disableAlpha:"disableAlpha"},outputs:{onChange:"onChange"},decls:10,vars:31,consts:[[1,"sketch-fields"],[1,"sketch-double"],["label","hex",3,"value","onChange"],[1,"sketch-single"],["label","r",3,"value","dragLabel","dragMax","onChange"],["label","g",3,"value","dragLabel","dragMax","onChange"],["label","b",3,"value","dragLabel","dragMax","onChange"],["class","sketch-alpha",4,"ngIf"],[1,"sketch-alpha"],["label","a",3,"value","dragLabel","dragMax","onChange"]],template:function(e,o){1&e&&(s.TgZ(0,"div",0)(1,"div",1)(2,"color-editable-input",2),s.NdJ("onChange",function(i){return o.handleChange(i)}),s.qZA()(),s.TgZ(3,"div",3)(4,"color-editable-input",4),s.NdJ("onChange",function(i){return o.handleChange(i)}),s.qZA()(),s.TgZ(5,"div",3)(6,"color-editable-input",5),s.NdJ("onChange",function(i){return o.handleChange(i)}),s.qZA()(),s.TgZ(7,"div",3)(8,"color-editable-input",6),s.NdJ("onChange",function(i){return o.handleChange(i)}),s.qZA()(),s.YNc(9,E,2,8,"div",7),s.qZA()),2&e&&(s.xp6(2),s.Akn(s.WLB(19,f,o.input,o.label)),s.Q6J("value",o.hex.replace("#","")),s.xp6(2),s.Akn(s.WLB(22,f,o.input,o.label)),s.Q6J("value",o.rgb.r)("dragLabel",!0)("dragMax",255),s.xp6(2),s.Akn(s.WLB(25,f,o.input,o.label)),s.Q6J("value",o.rgb.g)("dragLabel",!0)("dragMax",255),s.xp6(2),s.Akn(s.WLB(28,f,o.input,o.label)),s.Q6J("value",o.rgb.b)("dragLabel",!0)("dragMax",255),s.xp6(1),s.Q6J("ngIf",!1===o.disableAlpha))},dependencies:[g.O5,h.BM],styles:[".sketch-fields[_ngcontent-%COMP%]{display:flex;padding-top:4px}.sketch-double[_ngcontent-%COMP%]{flex:2 1 0%}.sketch-single[_ngcontent-%COMP%], .sketch-alpha[_ngcontent-%COMP%]{flex:1 1 0%;padding-left:6px}[dir=rtl][_nghost-%COMP%]   .sketch-single[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-single[_ngcontent-%COMP%]{padding-right:6px;padding-left:0}[dir=rtl][_nghost-%COMP%]   .sketch-alpha[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-alpha[_ngcontent-%COMP%]{padding-right:6px;padding-left:0}"],changeDetection:0})}return a})(),U=(()=>{class a{colors;onClick=new s.vpe;onSwatchHover=new s.vpe;swatchStyle={borderRadius:"3px",boxShadow:"inset 0 0 0 1px rgba(0,0,0,.15)"};handleClick({hex:t,$event:e}){this.onClick.emit({hex:t,$event:e})}normalizeValue(t){return"string"==typeof t?{color:t}:t}focusStyle(t){return{boxShadow:`inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ${this.normalizeValue(t).color}`}}static \u0275fac=function(e){return new(e||a)};static \u0275cmp=s.Xpm({type:a,selectors:[["color-sketch-preset-colors"]],inputs:{colors:"colors"},outputs:{onClick:"onClick",onSwatchHover:"onSwatchHover"},decls:2,vars:1,consts:[[1,"sketch-swatches"],["class","sketch-wrap",4,"ngFor","ngForOf"],[1,"sketch-wrap"],[1,"swatch",3,"color","focusStyle","onClick","onHover"]],template:function(e,o){1&e&&(s.TgZ(0,"div",0),s.YNc(1,Z,2,4,"div",1),s.qZA()),2&e&&(s.xp6(1),s.Q6J("ngForOf",o.colors))},dependencies:[g.sg,h.iP],styles:[".sketch-swatches[_ngcontent-%COMP%]{position:relative;display:flex;flex-wrap:wrap;margin:0 -10px;padding:10px 0 0 10px;border-top:1px solid rgb(238,238,238)}.sketch-wrap[_ngcontent-%COMP%]{width:16px;height:16px;margin:0 10px 10px 0}[dir=rtl][_nghost-%COMP%]   .sketch-swatches[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-swatches[_ngcontent-%COMP%]{padding-right:10px;padding-left:0}[dir=rtl][_nghost-%COMP%]   .sketch-wrap[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-wrap[_ngcontent-%COMP%]{margin-left:10px;margin-right:0}"],changeDetection:0})}return a})(),J=(()=>{class a extends h.t1{disableAlpha=!1;presetColors=["#D0021B","#F5A623","#F8E71C","#8B572A","#7ED321","#417505","#BD10E0","#9013FE","#4A90E2","#50E3C2","#B8E986","#000000","#4A4A4A","#9B9B9B","#FFFFFF"];width=200;activeBackground;constructor(){super()}afterValidChange(){this.activeBackground=`rgba(${this.rgb.r}, ${this.rgb.g}, ${this.rgb.b}, ${this.disableAlpha?1:this.rgb.a})`}handleValueChange({data:t,$event:e}){this.handleChange(t,e)}handleBlockChange({hex:t,$event:e}){(0,h.FX)(t)&&this.handleChange({hex:t,source:"hex"},e)}static \u0275fac=function(e){return new(e||a)};static \u0275cmp=s.Xpm({type:a,selectors:[["color-sketch"]],inputs:{disableAlpha:"disableAlpha",presetColors:"presetColors",width:"width"},features:[s._Bn([{provide:x.JU,useExisting:(0,s.Gpc)(()=>a),multi:!0},{provide:h.t1,useExisting:(0,s.Gpc)(()=>a)}]),s.qOj],decls:14,vars:16,consts:[[1,"sketch-saturation"],[3,"hsl","hsv","onChange"],[1,"sketch-controls"],[1,"sketch-sliders"],[1,"sketch-hue"],[3,"hsl","onChange"],["class","sketch-alpha",4,"ngIf"],[1,"sketch-color"],[1,"sketch-active"],[1,"sketch-fields-container"],[3,"rgb","hsl","hex","disableAlpha","onChange"],["class","sketch-swatches-container",4,"ngIf"],[1,"sketch-alpha"],[3,"radius","rgb","hsl","onChange"],[1,"sketch-swatches-container"],[3,"colors","onClick","onSwatchHover"]],template:function(e,o){1&e&&(s.TgZ(0,"div")(1,"div",0)(2,"color-saturation",1),s.NdJ("onChange",function(i){return o.handleValueChange(i)}),s.qZA()(),s.TgZ(3,"div",2)(4,"div",3)(5,"div",4)(6,"color-hue",5),s.NdJ("onChange",function(i){return o.handleValueChange(i)}),s.qZA()(),s.YNc(7,O,2,3,"div",6),s.qZA(),s.TgZ(8,"div",7),s._UZ(9,"color-checkboard")(10,"div",8),s.qZA()(),s.TgZ(11,"div",9)(12,"color-sketch-fields",10),s.NdJ("onChange",function(i){return o.handleValueChange(i)}),s.qZA()(),s.YNc(13,F,2,1,"div",11),s.qZA()),2&e&&(s.Gre("sketch-picker ",o.className,""),s.Udp("width",o.width,"px"),s.xp6(2),s.Q6J("hsl",o.hsl)("hsv",o.hsv),s.xp6(4),s.Q6J("hsl",o.hsl),s.xp6(1),s.Q6J("ngIf",!1===o.disableAlpha),s.xp6(3),s.Udp("background",o.activeBackground),s.xp6(2),s.Q6J("rgb",o.rgb)("hsl",o.hsl)("hex",o.hex)("disableAlpha",o.disableAlpha),s.xp6(1),s.Q6J("ngIf",o.presetColors&&o.presetColors.length))},dependencies:()=>[g.O5,h.zy,h.OU,h.V5,h._m,I,U],styles:[".sketch-picker[_ngcontent-%COMP%]{padding:10px 10px 3px;box-sizing:initial;background:#fff;border-radius:4px;box-shadow:0 0 0 1px #00000026,0 8px 16px #00000026}.sketch-saturation[_ngcontent-%COMP%]{width:100%;padding-bottom:75%;position:relative;overflow:hidden}.sketch-fields-container[_ngcontent-%COMP%], .sketch-swatches-container[_ngcontent-%COMP%]{display:block}.sketch-controls[_ngcontent-%COMP%]{display:flex}.sketch-sliders[_ngcontent-%COMP%]{padding:4px 0;flex:1 1 0%}.sketch-hue[_ngcontent-%COMP%]{position:relative;height:10px;overflow:hidden}.sketch-alpha[_ngcontent-%COMP%]{position:relative;height:10px;margin-top:4px;overflow:hidden}.sketch-color[_ngcontent-%COMP%]{width:24px;height:24px;position:relative;margin-top:4px;margin-left:4px;border-radius:3px}.sketch-active[_ngcontent-%COMP%]{position:absolute;inset:0;border-radius:2px;box-shadow:#00000026 0 0 0 1px inset,#00000040 0 0 4px inset}[dir=rtl][_nghost-%COMP%]   .sketch-color[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-color[_ngcontent-%COMP%]{margin-right:4px;margin-left:0}"],changeDetection:0})}return a})(),D=(()=>{class a{static \u0275fac=function(e){return new(e||a)};static \u0275mod=s.oAB({type:a});static \u0275inj=s.cJS({imports:[g.ez,h.F2,h.$P,h.lp,h.q7,h.nH,h.wU]})}return a})();function B(a,m){if(1&a){const t=s.EpF();s.TgZ(0,"div")(1,"color-sketch",5),s.NdJ("onChangeComplete",function(o){s.CHM(t);const c=s.oxw(),i=s.MAs(6);return s.KtG(i.select(c.getHex8(o)))}),s.qZA()()}if(2&a){s.oxw();const t=s.MAs(6);s.Udp("width",240,"px"),s.xp6(1),s.Q6J("color",t.selected)}}const N={title:"Custom Picker",component:(()=>{class a{getHex8(t){return 1===t.color.rgb.a?t.color.hex:new v.C(t.color.rgb).toHex8String()}static#s=this.\u0275fac=function(e){return new(e||a)};static#t=this.\u0275cmp=s.Xpm({type:a,selectors:[["color-picker-example"]],decls:9,vars:3,consts:[["matInput","",3,"mtxColorpicker"],["matSuffix","",3,"for"],[3,"content"],["customPicker",""],["customPickerContent",""],[3,"color","onChangeComplete"]],template:function(e,o){if(1&e&&(s.TgZ(0,"mat-form-field")(1,"mat-label"),s._uU(2,"Custom Color Picker"),s.qZA(),s._UZ(3,"input",0)(4,"mtx-colorpicker-toggle",1)(5,"mtx-colorpicker",2,3),s.qZA(),s.YNc(7,B,2,3,"ng-template",null,4,s.W1O)),2&e){const c=s.MAs(6),i=s.MAs(8);s.xp6(3),s.Q6J("mtxColorpicker",c),s.xp6(1),s.Q6J("for",c),s.xp6(1),s.Q6J("content",i)}},dependencies:[C.Nt,d.KE,d.hX,d.R9,j.YK,k.zA,u.s,J]})}return a})(),files:[{file:"app.component.html",content:n(77389),filecontent:n(48642)},{file:"app.component.ts",content:n(90770),filecontent:n(13419)},{file:"app.component.scss",content:n(22618),filecontent:n(40961)}]};var H=n(71629),L=n(52240);function Q(a,m){if(1&a&&(s.ynx(0),s._UZ(1,"example-viewer",2),s.BQk()),2&a){const t=m.$implicit;s.xp6(1),s.Q6J("exampleData",t)}}function X(a,m){if(1&a&&(s.ynx(0),s.YNc(1,Q,2,1,"ng-container",1),s.BQk()),2&a){const t=m.ngIf;s.xp6(1),s.Q6J("ngForOf",t.examples)}}function q(a,m){if(1&a&&(s.ynx(0),s._UZ(1,"doc-viewer",1),s.BQk()),2&a){const t=m.ngIf;s.xp6(1),s.Q6J("textContent",t.content.default)}}let y=(()=>{class a{constructor(t){this.route=t}static#s=this.\u0275fac=function(e){return new(e||a)(s.Y36(r.gz))};static#t=this.\u0275cmp=s.Xpm({type:a,selectors:[["app-colorpicker-overview"]],decls:9,vars:3,consts:[[4,"ngIf"],[4,"ngFor","ngForOf"],[3,"exampleData"]],template:function(e,o){1&e&&(s.TgZ(0,"p")(1,"code"),s._uU(2,"mtx-colorpicker"),s.qZA(),s._uU(3," uses Chrome style of "),s.TgZ(4,"code"),s._uU(5,"ngx-color"),s.qZA(),s._uU(6,". Now you can change any style what you like very easily.\n"),s.qZA(),s.YNc(7,X,2,1,"ng-container",0),s.ALo(8,"async")),2&e&&(s.xp6(7),s.Q6J("ngIf",s.lcZ(8,1,o.route.data)))},dependencies:[g.sg,g.O5,H.B,g.Ov],encapsulation:2})}return a})(),A=(()=>{class a{constructor(t){this.route=t}static#s=this.\u0275fac=function(e){return new(e||a)(s.Y36(r.gz))};static#t=this.\u0275cmp=s.Xpm({type:a,selectors:[["app-colorpicker-api"]],decls:2,vars:3,consts:[[4,"ngIf"],[3,"textContent"]],template:function(e,o){1&e&&(s.YNc(0,q,2,1,"ng-container",0),s.ALo(1,"async")),2&e&&s.Q6J("ngIf",s.lcZ(1,1,o.route.data))},dependencies:[g.O5,L.z,g.Ov],encapsulation:2})}return a})(),R=(()=>{class a{static#s=this.\u0275fac=function(e){return new(e||a)};static#t=this.\u0275mod=s.oAB({type:a});static#n=this.\u0275inj=s.cJS({imports:[T.m,r.Bz.forChild([{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:y,pathMatch:"full",data:{examples:[_,N,S,M]}},{path:"api",component:A,pathMatch:"full",data:{content:n(11853)}},{path:"**",redirectTo:"overview"}]),D]})}return a})()},16461:p=>{p.exports='<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>Color Format<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;format&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hex&quot;</span>&gt;</span>HEX<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;rgb&quot;</span>&gt;</span>RGB<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hsl&quot;</span>&gt;</span>HSL<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hsv&quot;</span>&gt;</span>HSV<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Color picker<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;color&quot;</span> [<span class="hljs-attr">mtxColorpicker</span>]=<span class="hljs-string">&quot;picker&quot;</span> [<span class="hljs-attr">format</span>]=<span class="hljs-string">&quot;format&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker-toggle</span> <span class="hljs-attr">matSuffix</span> [<span class="hljs-attr">for</span>]=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker-toggle</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker</span> #<span class="hljs-attr">picker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-hint</span>&gt;</span>Choose your favorite color<span class="hljs-tag">&lt;/<span class="hljs-name">mat-hint</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-error</span>&gt;</span>Please enter the color<span class="hljs-tag">&lt;/<span class="hljs-name">mat-error</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n'},42185:p=>{p.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Color picker<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [<span class="hljs-attr">mtxColorpicker</span>]=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker-toggle</span> <span class="hljs-attr">matSuffix</span> [<span class="hljs-attr">for</span>]=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-icon</span> <span class="hljs-attr">mtxColorpickerToggleIcon</span>&gt;</span>keyboard_arrow_down<span class="hljs-tag">&lt;/<span class="hljs-name">mat-icon</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker-toggle</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker</span> #<span class="hljs-attr">picker</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n'},77389:p=>{p.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Custom Color Picker<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [<span class="hljs-attr">mtxColorpicker</span>]=<span class="hljs-string">&quot;customPicker&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker-toggle</span> <span class="hljs-attr">matSuffix</span> [<span class="hljs-attr">for</span>]=<span class="hljs-string">&quot;customPicker&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker-toggle</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker</span> #<span class="hljs-attr">customPicker</span> [<span class="hljs-attr">content</span>]=<span class="hljs-string">&quot;customPickerContent&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">customPickerContent</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">style.width.px</span>]=<span class="hljs-string">&quot;240&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">color-sketch</span> [<span class="hljs-attr">color</span>]=<span class="hljs-string">&quot;customPicker.selected&quot;</span>\n                  (<span class="hljs-attr">onChangeComplete</span>)=<span class="hljs-string">&quot;customPicker.select(getHex8($event))&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">color-sketch</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span>\n'},7440:p=>{p.exports='<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Color picker<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [<span class="hljs-attr">mtxColorpicker</span>]=<span class="hljs-string">&quot;cp1&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker-toggle</span> <span class="hljs-attr">matSuffix</span> [<span class="hljs-attr">for</span>]=<span class="hljs-string">&quot;cp1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker-toggle</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker</span> #<span class="hljs-attr">cp1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Color picker<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [<span class="hljs-attr">mtxColorpicker</span>]=<span class="hljs-string">&quot;cp2&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker-toggle</span> <span class="hljs-attr">matSuffix</span> [<span class="hljs-attr">for</span>]=<span class="hljs-string">&quot;cp2&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker-toggle</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker</span> #<span class="hljs-attr">cp2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>Color picker<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [<span class="hljs-attr">mtxColorpicker</span>]=<span class="hljs-string">&quot;cp3&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker-toggle</span> <span class="hljs-attr">matSuffix</span> [<span class="hljs-attr">for</span>]=<span class="hljs-string">&quot;cp3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker-toggle</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mtx-colorpicker</span> #<span class="hljs-attr">cp3</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mtx-colorpicker</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n'},77095:p=>{p.exports='<span class="hljs-comment">/** No CSS for this example */</span>\n'},83501:p=>{p.exports='<span class="hljs-comment">/** No CSS for this example */</span>\n'},22618:p=>{p.exports='<span class="hljs-comment">/** No CSS for this example */</span>\n'},85401:p=>{p.exports='<span class="hljs-comment">/** No CSS for this example */</span>\n'},22236:p=>{p.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ColorFormat</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/colorpicker&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;color-picker-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\n  color = <span class="hljs-string">&#x27;#3f51b5&#x27;</span>;\n  <span class="hljs-attr">format</span>: <span class="hljs-title class_">ColorFormat</span> = <span class="hljs-string">&#x27;hex&#x27;</span>;\n}\n'},78150:p=>{p.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;color-picker-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {}\n'},90770:p=>{p.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">ColorEvent</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;ngx-color&#x27;</span>;\n\n<span class="hljs-keyword">import</span> { <span class="hljs-title class_">TinyColor</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ctrl/tinycolor&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;color-picker-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {\n  <span class="hljs-title function_">getHex8</span>(<span class="hljs-attr">e</span>: <span class="hljs-title class_">ColorEvent</span>): <span class="hljs-built_in">string</span> {\n    <span class="hljs-keyword">const</span> alpha = e.<span class="hljs-property">color</span>.<span class="hljs-property">rgb</span>.<span class="hljs-property">a</span>;\n    <span class="hljs-keyword">return</span> alpha === <span class="hljs-number">1</span> ? e.<span class="hljs-property">color</span>.<span class="hljs-property">hex</span> : <span class="hljs-keyword">new</span> <span class="hljs-title class_">TinyColor</span>(e.<span class="hljs-property">color</span>.<span class="hljs-property">rgb</span>).<span class="hljs-title function_">toHex8String</span>();\n  }\n}\n'},86560:p=>{p.exports='<span class="hljs-keyword">import</span> { <span class="hljs-title class_">Component</span> } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;color-picker-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> {}\n'},11853:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r='<h1 id="color-picker">Color Picker</h1>\n<h2 id="api-reference-for-material-extensions-colorpicker">API reference for Material Extensions colorpicker</h2>\n<p><code>import { MtxColorpickerModule } from &apos;@ng-matero/extensions/colorpicker&apos;;</code></p>\n<h3 id="directives">Directives</h3>\n<h4 id="mtxcolorpickerinput"><code>MtxColorpickerInput</code></h4>\n<p>Directive used to connect an input to a MtxColorpickerInput.</p>\n<p>Selector: <code>input[mtxColorpicker]</code></p>\n<p>Exported as: <code>mtxColorpickerInput</code></p>\n<h5 id="properties">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>disabled: boolean</code></td>\n<td align="left">Whether the colorpicker-input is disabled.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>mtxColorpicker: MtxColorpicker</code></td>\n<td align="left">The colorpicker that this input is associated with.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>value: string | null</code></td>\n<td align="left">The value of the input.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>format: ColorFormat</code></td>\n<td align="left">The color format. Can be <code>&apos;hex&apos;</code>, <code>&apos;rgb&apos;</code>, <code>&apos;hsl&apos;</code>, <code>&apos;hsv&apos;</code>. Default is <strong><code>&apos;hex&apos;</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output()</code><br><code>colorChange: EventEmitter&lt;MtxColorPickerInputEvent&gt;</code></td>\n<td align="left">Emits when a change event is fired on this <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output()</code><br><code>colorInput: EventEmitter&lt;MtxColorPickerInputEvent&gt;</code></td>\n<td align="left">Emits when an input event is fired on this <code>&lt;input&gt;</code>.</td>\n</tr>\n</tbody></table>\n<h5 id="methods">Methods</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>getConnectedOverlayOrigin(): ElementRef</code></td>\n<td align="left">Gets the element that the colorpicker popup should be connected to.</td>\n</tr>\n<tr>\n<td align="left"><code>getOverlayLabelId(): string | null</code></td>\n<td align="left">Gets the ID of an element that should be used a description for the overlay.</td>\n</tr>\n<tr>\n<td align="left"><code>getThemePalette(): ThemePalette</code></td>\n<td align="left">Returns the palette used by the input&apos;s form field, if any.</td>\n</tr>\n</tbody></table>\n<h4 id="mtxcolorpicker"><code>MtxColorpicker</code></h4>\n<p>Component responsible for managing the colorpicker popup/dialog.</p>\n<p>Selector: <code>mtx-colorpicker</code></p>\n<p>Exported as: <code>mtxColorpicker</code></p>\n<h5 id="properties-1">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input()</code><br><code>disabled: boolean</code></td>\n<td align="left">Whether the colorpicker pop-up should be disabled.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>format: ColorFormat</code></td>\n<td align="left">The color format. Can be <code>&apos;hex&apos;</code>, <code>&apos;rgb&apos;</code>, <code>&apos;hsl&apos;</code>, <code>&apos;hsv&apos;</code>. Default is <strong><code>&apos;hex&apos;</code></strong>.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>opened: boolean</code></td>\n<td align="left">Whether the color palette is open.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>restoreFocus: boolean</code></td>\n<td align="left">Whether to restore focus to the previously-focused element when the color palette is closed. Note that automatic focus restoration is an accessibility feature and it is recommended that you provide your own equivalent, if you decide to turn it off.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>xPosition: ColorpickerDropdownPositionX</code></td>\n<td align="left">Preferred position of the colorpicker in the X axis.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>yPosition: ColorpickerDropdownPositionY</code></td>\n<td align="left">Preferred position of the colorpicker in the Y axis.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output(&apos;opened&apos;)</code><br><code>openedStream: EventEmitter&lt;void&gt;</code></td>\n<td align="left">Emits when the colorpicker has been opened.</td>\n</tr>\n<tr>\n<td align="left"><code>@Output(&apos;closed&apos;)</code><br><code>closedStream: EventEmitter&lt;void&gt;</code></td>\n<td align="left">Emits when the colorpicker has been closed.</td>\n</tr>\n<tr>\n<td align="left"><code>selected: string</code></td>\n<td align="left">The currently selected color.</td>\n</tr>\n</tbody></table>\n<h5 id="methods-1">Methods</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>open(): void</code></td>\n<td align="left">Open the colorpicker panel.</td>\n</tr>\n<tr>\n<td align="left"><code>close(): void</code></td>\n<td align="left">Close the colorpicker panel.</td>\n</tr>\n<tr>\n<td align="left"><code>select(nextVal: string): void</code></td>\n<td align="left">Selects the given color.</td>\n</tr>\n<tr>\n<td align="left"><code>registerInput(input: MtxColorpickerInput): void</code></td>\n<td align="left">Register an input with this colorpicker.</td>\n</tr>\n</tbody></table>\n<h4 id="mtxcolorpickertoggleicon"><code>MtxColorpickerToggleIcon</code></h4>\n<p>Can be used to override the icon of a mtxColorpickerToggle.</p>\n<p>Selector: <code>[mtxColorpickerToggleIcon]</code></p>\n<h4 id="mtxcolorpickertoggle"><code>MtxColorpickerToggle</code></h4>\n<p>Selector: <code>mtx-colorpicker-toggle</code></p>\n<p>Exported as: <code>mtxColorpickerToggle</code></p>\n<h5 id="properties-2">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>@Input(&apos;for&apos;)</code><br><code>picker: MtxColorpicker</code></td>\n<td align="left">Colorpicker instance that the button will toggle.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>disableRipple: boolean</code></td>\n<td align="left">Whether ripples on the toggle should be disabled.</td>\n</tr>\n<tr>\n<td align="left"><code>@Input()</code><br><code>disabled: boolean</code></td>\n<td align="left">Whether the toggle button is disabled.</td>\n</tr>\n</tbody></table>\n<h3 id="classes">Classes</h3>\n<h4 id="mtxcolorpickerinputevent"><code>MtxColorPickerInputEvent</code></h4>\n<p>An event used for colorpicker input and change events. We don&apos;t always have access to a native input or change event because the event may have been triggered by the user clicking on the color palette popup. For consistency, we always use <code>MtxColorPickerInputEvent</code> instead.</p>\n<h5 id="properties-3">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>target: MtxColorpickerInput</code></td>\n<td align="left">Reference to the colorpicker input component that emitted the event.</td>\n</tr>\n<tr>\n<td align="left"><code>targetElement: HTMLElement</code></td>\n<td align="left">Reference to the native input element associated with the colorpicker input.</td>\n</tr>\n<tr>\n<td align="left"><code>value: string | null</code></td>\n<td align="left">The new value for the target colorpicker input.</td>\n</tr>\n</tbody></table>\n<h3 id="type-aliases">Type aliases</h3>\n<h4 id="colorpickerdropdownpositionx"><code>ColorpickerDropdownPositionX</code></h4>\n<p>Possible positions for the colorpicker dropdown along the X axis.</p>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ColorpickerDropdownPositionX</span> = <span class="hljs-string">&apos;start&apos;</span> | <span class="hljs-string">&apos;end&apos;</span>;\n</pre>\n<h4 id="colorpickerdropdownpositiony"><code>ColorpickerDropdownPositionY</code></h4>\n<p>Possible positions for the colorpicker dropdown along the Y axis.</p>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ColorpickerDropdownPositionY</span> = <span class="hljs-string">&apos;above&apos;</span> | <span class="hljs-string">&apos;below&apos;</span>;\n</pre>\n<h4 id="colorformat"><code>ColorFormat</code></h4>\n<p>Possible color formats.</p>\n<pre class="hljs"><span class="hljs-keyword">type</span> <span class="hljs-title class_">ColorFormat</span> = <span class="hljs-string">&apos;hex&apos;</span> | <span class="hljs-string">&apos;rgb&apos;</span> | <span class="hljs-string">&apos;hsl&apos;</span> | <span class="hljs-string">&apos;hsv&apos;</span>;\n</pre>\n<h3 id="constants">Constants</h3>\n<h4 id="mtx_colorpicker_scroll_strategy"><code>MTX_COLORPICKER_SCROLL_STRATEGY</code></h4>\n<p>Injection token that determines the scroll handling while the color palette is open.</p>\n<pre class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-attr">MTX_COLORPICKER_SCROLL_STRATEGY</span>: <span class="hljs-title class_">InjectionToken</span>&lt;<span class="hljs-function">() =&gt;</span> <span class="hljs-title class_">ScrollStrategy</span>&gt;;\n</pre>\n'},64132:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r='<div>\n  <label>Color Format</label>\n  <mat-radio-group [(ngModel)]="format">\n    <mat-radio-button value="hex">HEX</mat-radio-button>\n    <mat-radio-button value="rgb">RGB</mat-radio-button>\n    <mat-radio-button value="hsl">HSL</mat-radio-button>\n    <mat-radio-button value="hsv">HSV</mat-radio-button>\n  </mat-radio-group>\n</div>\n\n<mat-form-field>\n  <mat-label>Color picker</mat-label>\n  <input matInput [(ngModel)]="color" [mtxColorpicker]="picker" [format]="format">\n  <mtx-colorpicker-toggle matSuffix [for]="picker"></mtx-colorpicker-toggle>\n  <mtx-colorpicker #picker></mtx-colorpicker>\n  <mat-hint>Choose your favorite color</mat-hint>\n  <mat-error>Please enter the color</mat-error>\n</mat-form-field>\n'},24476:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="/** No CSS for this example */\n"},23777:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="import { Component } from '@angular/core';\nimport { ColorFormat } from '@ng-matero/extensions/colorpicker';\n\n@Component({\n  selector: 'color-picker-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  color = '#3f51b5';\n  format: ColorFormat = 'hex';\n}\n"},95534:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r='<mat-form-field>\n  <mat-label>Color picker</mat-label>\n  <input matInput [mtxColorpicker]="picker">\n  <mtx-colorpicker-toggle matSuffix [for]="picker">\n    <mat-icon mtxColorpickerToggleIcon>keyboard_arrow_down</mat-icon>\n  </mtx-colorpicker-toggle>\n  <mtx-colorpicker #picker></mtx-colorpicker>\n</mat-form-field>\n'},72224:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="/** No CSS for this example */\n"},56527:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="import { Component } from '@angular/core';\n\n@Component({\n  selector: 'color-picker-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n"},48642:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r='<mat-form-field>\n  <mat-label>Custom Color Picker</mat-label>\n  <input matInput [mtxColorpicker]="customPicker">\n  <mtx-colorpicker-toggle matSuffix [for]="customPicker"></mtx-colorpicker-toggle>\n  <mtx-colorpicker #customPicker [content]="customPickerContent"></mtx-colorpicker>\n</mat-form-field>\n\n<ng-template #customPickerContent>\n  <div [style.width.px]="240">\n    <color-sketch [color]="customPicker.selected"\n                  (onChangeComplete)="customPicker.select(getHex8($event))">\n    </color-sketch>\n  </div>\n</ng-template>\n'},40961:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="/** No CSS for this example */\n"},13419:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="import { Component } from '@angular/core';\nimport { ColorEvent } from 'ngx-color';\n\nimport { TinyColor } from '@ctrl/tinycolor';\n\n@Component({\n  selector: 'color-picker-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  getHex8(e: ColorEvent): string {\n    const alpha = e.color.rgb.a;\n    return alpha === 1 ? e.color.hex : new TinyColor(e.color.rgb).toHex8String();\n  }\n}\n"},33393:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r='<p>\n  <mat-form-field>\n    <mat-label>Color picker</mat-label>\n    <input matInput [mtxColorpicker]="cp1" disabled>\n    <mtx-colorpicker-toggle matSuffix [for]="cp1"></mtx-colorpicker-toggle>\n    <mtx-colorpicker #cp1></mtx-colorpicker>\n  </mat-form-field>\n</p>\n\n<p>\n  <mat-form-field>\n    <mat-label>Color picker</mat-label>\n    <input matInput [mtxColorpicker]="cp2">\n    <mtx-colorpicker-toggle matSuffix [for]="cp2" disabled></mtx-colorpicker-toggle>\n    <mtx-colorpicker #cp2></mtx-colorpicker>\n  </mat-form-field>\n</p>\n\n<p>\n  <mat-form-field>\n    <mat-label>Color picker</mat-label>\n    <input matInput [mtxColorpicker]="cp3" disabled>\n    <mtx-colorpicker-toggle matSuffix [for]="cp3"></mtx-colorpicker-toggle>\n    <mtx-colorpicker #cp3 disabled="false"></mtx-colorpicker>\n  </mat-form-field>\n</p>\n'},9394:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="/** No CSS for this example */\n"},74372:(p,l,n)=>{"use strict";n.r(l),n.d(l,{default:()=>r});const r="import { Component } from '@angular/core';\n\n@Component({\n  selector: 'color-picker-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n"}}]);